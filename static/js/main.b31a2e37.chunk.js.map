{"version":3,"sources":["MessagePane/Form/Form.jsx","MessagePane/MessagePane.jsx","UserList/UserList.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","state","message","onSubmit","bind","handleKeyPress","updateMessage","this","props","onSend","setState","event","key","preventDefault","target","value","className","placeholder","onChange","onKeyPress","onClick","React","Component","defaultProps","Message","user","text","List","messages","map","index","MessagePane","onSendMessage","User","name","isSelected","UserList","users","selectedUser","onSelect","user_id","id","App","onUserSelect","newMessage","connect","Boolean","window","location","hostname","match","store","createStore","combineReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b31a2e37.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Form extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: ''\r\n        };\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.updateMessage = this.updateMessage.bind(this);\r\n    }\r\n\r\n    onSubmit() {\r\n        const message = this.state.message;\r\n        this.props.onSend(message);\r\n        this.setState({message: ''});\r\n    }\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();\r\n            this.onSubmit();\r\n        }\r\n    }\r\n\r\n    updateMessage(event) {\r\n        this.setState({message: event.target.value});\r\n    }\r\n\r\n    render () {\r\n        return (<div className=\"MessagePane-Form\">\r\n                    <div className=\"MessagePane-Form-container\">\r\n                        <p>\r\n                            <textarea className=\"message\" placeholder=\"Your Message\" value={this.state.message} onChange={this.updateMessage} onKeyPress={this.handleKeyPress}/>\r\n                        </p>\r\n                        <p>\r\n                            <button className=\"send\" onClick={this.onSubmit}>Send</button>\r\n                        </p>\r\n                    </div>\r\n                </div>)\r\n    }\r\n}\r\n\r\nForm.defaultProps = {\r\n    onSend: () => {}\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './MessagePane.css'\r\nimport Form from './Form/Form'\r\n\r\nconst Message = ({user, text}) => {\r\n    return (<div className=\"Message\">\r\n                <p className=\"Message-author\">{user}</p>\r\n                <div className=\"Message-text\">{text}</div>\r\n            </div>)\r\n}\r\n\r\nconst List = ({messages}) => {\r\n    return (<div className=\"MessagePane-Form\">\r\n                {messages.map(({index, text, user}) => <Message key={index} text={text} user={user}/> )}\r\n            </div>)\r\n}\r\n\r\nconst MessagePane = ({messages, onSendMessage}) => {\r\n    return (<div className=\"MessagePane-Form-container\">\r\n                <List messages={messages} onSend={onSendMessage}/>\r\n                <Form onSend={onSendMessage}/>\r\n            </div>)\r\n}\r\n\r\nMessagePane.defaultProps = {\r\n    messages: []\r\n}\r\n\r\nMessagePane.propTypes = {\r\n    messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default MessagePane","import React from 'react'\r\n\r\nconst User = ({name, isSelected, onClick}) => {\r\n    const className = isSelected ? \"UserList-item UserList-item-selected\" : \"UserList-item\";\r\n    return <div className={className} onClick={onClick}>{name}</div>\r\n}\r\n\r\nconst UserList = ({users, selectedUser, onSelect}) => {\r\n    return (<div className=\"UserList\">\r\n                {users.map(({user_id, name}) => {\r\n                    const isSelected = selectedUser === name;\r\n                    const onUserSelect = () => onSelect(name);\r\n                    return <User key={user_id} name={name} isSelected={isSelected} onClick={onUserSelect}/>\r\n                })}\r\n            </div>)\r\n};\r\n\r\nexport default UserList","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport MessagePane from './MessagePane/MessagePane';\r\nimport UserList from './UserList/UserList';\r\nimport \"./App.css\";\r\n\r\nconst users = [\r\n  { id: 1, name: 'Ben' },\r\n  { id: 2, name: 'Jen' },\r\n  { id: 3, name: 'Meg' },\r\n  { id: 4, name: 'Jeff' },\r\n];\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      messages: [],\r\n      users,\r\n      selectedUser: null\r\n    };\r\n    this.onSendMessage = this.onSendMessage.bind(this);\r\n    this.onUserSelect = this.onUserSelect.bind(this);\r\n  }\r\n\r\n  onSendMessage(text) {\r\n    const newMessage = {\r\n      text,\r\n      user: this.state.selectedUser\r\n    }\r\n\r\n    const messages = [...this.state.messages, newMessage];\r\n    this.setState({messages})\r\n  }\r\n\r\n  onUserSelect(name) {\r\n    this.setState({selectedUser: name})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <UserList selectedUser={this.state.selectedUser} users={this.state.users} onSelect={this.onUserSelect}/>\r\n        {this.state.selectedUser ? <MessagePane messages={this.state.messages} onSendMessage={this.onSendMessage}/> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => state;\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport {createStore, combineReducers} from 'redux';\r\nimport {Provider} from 'react-redux';\r\n\r\nconst messages = (state = [], action) => state;\r\nconst selectedUser = (state = null, action) => state;\r\n\r\nconst store = createStore(combineReducers({messages, selectedUser}));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}